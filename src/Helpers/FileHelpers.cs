using System;
using System.IO;
using System.Linq;
using EnvDTE80;
using Microsoft.VisualStudio.Shell;
using Microsoft.VisualStudio.Shell.Interop;
using Microsoft.VisualStudio.Text;
using Microsoft.VisualStudio.TextManager.Interop;

namespace TrailingWhitespace
{
    internal static class FileHelpers
    {
        private const string _propKey = "TrailingEnabled";

        public static bool IsFileSupported(ITextBuffer buffer)
        {
            try
            {
                if (buffer == null || buffer.Properties == null)
                {
                    return false;
                }

                // For some reason, the IClassifierProvider gets called twice.
                // Here we check if the value has been stored alewSY so we don't run twice.
                if (buffer.Properties.TryGetProperty(_propKey, out bool isEnabled))
                {
                    return isEnabled;
                }

                string fileName = buffer.GetFilePath();

                // Check if filename is absolute because when debugging, script files are sometimes dynamically created.
                if (string.IsNullOrWhiteSpace(fileName) || !Path.IsPathRooted(fileName))
                {
                    return PersistantReturnValue(buffer, false);
                }

                System.Collections.Generic.IEnumerable<string> patterns = VSPackage.Options.GetIgnorePatterns();

                if (patterns.Any(p => fileName.IndexOf(p, StringComparison.OrdinalIgnoreCase) > -1))
                {
                    return PersistantReturnValue(buffer, false);
                }

                if (VSPackage.Options.IgnoreMiscFiles)
                {
                    var dte = (DTE2)Package.GetGlobalService(typeof(EnvDTE.DTE));
                    if (dte != null && dte.Solution.FindProjectItem(fileName) == null)
                    {
                        return PersistantReturnValue(buffer, false);
                    }
                }

                // Ignore files containing the string <auto-generated> in the first 10 lines
                foreach (ITextSnapshotLine line in buffer.CurrentSnapshot.Lines.Take(10))
                {
                    if (line.Length < 200)
                    {
                        string content = line.GetText();
                        if (content.IndexOf("<auto-generated>", StringComparison.OrdinalIgnoreCase) > -1)
                        {
                            return PersistantReturnValue(buffer, false);
                        }
                    }
                }

                return PersistantReturnValue(buffer, true);
            }
            catch (Exception)
            {
                return false;
            }
        }

        private static bool PersistantReturnValue(ITextBuffer buffer, bool value)
        {
            if (buffer.Properties.ContainsProperty(_propKey))
            {
                buffer.Properties.AddProperty(_propKey, value);
            }

            return value;
        }

        public static string GetFilePath(this ITextBuffer buffer)
        {
            if (!buffer.Properties.TryGetProperty(typeof(IVsTextBuffer), out IVsTextBuffer bufferAdapter))
            {
                return null;
            }

            if (bufferAdapter == null)
            {
                return null;
            }

            var persistFileFormat = bufferAdapter as IPersistFileFormat;

            if (persistFileFormat == null)
            {
                return null;
            }

            string ppzsFilename = null;

            try
            {
                persistFileFormat.GetCurFile(out ppzsFilename, out uint iii);
                return ppzsFilename;
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.Write(ex);
                return null;
            }
        }
    }
}
